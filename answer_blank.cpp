#include <iostream>
#include <vector>
#include <string>

struct Question {
    std::string text;
    std::string answer;
};

class TestTaker {
public:
    void runTest() {
        askGroupAndName();
        administerTest();
        displayResult();
    }

private:
    int groupNumber;
    std::string studentName;
    int score = 0;
    const int totalQuestions = 10;
    std::vector<Question> questions = {
        {"Вопрос 1: Что такое инкапсуляция в C++ и какие преимущества она предоставляет?", "Инкапсуляция в C++ - это механизм, который позволяет объединить данные и методы, работающие с ними, в единый класс, скрывая детали реализации от внешнего мира. Преимущества включают улучшенную безопасность, управление доступом к данным через методы и легкость сопровождения кода."},
        {"Вопрос 2: Какие основные принципы перегрузки функций в C++? Какие типы перегрузки существуют?", "Перегрузка функций в C++ позволяет создавать функции с одним и тем же именем, но разными параметрами. Принципы включают изменение типов параметров, изменение количества параметров и изменение порядка параметров."},
        {"Вопрос 3: Как работают указатели в C++? В чем разница между указателями и ссылками?", "Указатели в C++ представляют переменные, хранящие адреса памяти. Они используются для динамического выделения памяти и эффективной передачи адресов в функции. Основная разница между указателями и ссылками заключается в том, что указатели могут быть NULL, а ссылки всегда должны указывать на существующий объект."},
        {"Вопрос 4: Как использовать ссылки в C++? В чем их преимущества по сравнению с указателями?", "Ссылки в C++ представляют альтернативу указателям и предоставляют удобный синтаксис для работы с объектами. Они не могут быть NULL и обеспечивают более безопасное взаимодействие с памятью."},
        {"Вопрос 5: Какие основные типы данных поддерживаются в C++? Как выбрать подходящий тип данных для конкретной задачи?", "Основные типы данных в C++ включают целочисленные, вещественные, символьные, логические и пользовательские типы данных. Выбор подходящего типа зависит от требований задачи, размера данных и требований по производительности."},
        {"Вопрос 6: Что такое константность в C++? Какие виды констант существуют, и в чем их различия?", "Константность в C++ может быть применена к объектам и указателям. Константные объекты нельзя изменять, а константные указатели запрещают изменение данных, на которые они указывают."},
        {"Вопрос 7: Что такое виртуальные функции и как они используются для достижения полиморфизма в C++?", "Виртуальные функции в C++ используются для достижения полиморфизма. Они позволяют вызывать функции на основе типа объекта во время выполнения программы."},
        {"Вопрос 8: Каковы преимущества использования стека в C++? В чем отличие стека от кучи (heap)?", "Стек в C++ - это структура данных, работающая по принципу Last In, First Out (LIFO). Он используется для хранения локальных переменных и управления вызовом функций. Отличие от кучи в том, что память в стеке освобождается автоматически при выходе из области видимости."},
        {"Вопрос 9: Какие особенности работы с динамической памятью в C++? Как избежать утечек памяти?", "Для работы с динамической памятью в C++ используются операторы new и delete. Утечки памяти могут возникнуть, если не вызывать delete после выделения памяти оператором new."},
        {"Вопрос 10: Как реализовать множественное наследование в C++? Какие могут возникнуть проблемы при использовании множественного наследования?", "Множественное наследование в C++ позволяет классу наследовать функциональность от нескольких базовых классов. Проблемы могут возникнуть из-за амбивалентности, когда класс наследует методы с одинаковыми именами от разных базовых классов. Виртуальное наследование используется для разрешения таких конфликтов."}
    };

    void askGroupAndName() {
        askGroupNumber();
        askStudentName();
    }

    void askGroupNumber() {
        std::cout << "Введите номер группы: ";
        std::cin >> groupNumber;
    }

    void askStudentName() {
        std::cout << "Введите ваше имя: ";
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::getline(std::cin, studentName);
    }

    void administerTest() {
        for (const auto& q : questions) {
            std::cout << q.text << std::endl;
            std::string userAnswer = askForAnswer("Ваш ответ: ");
            
            if (userAnswer == q.answer) {
                score++;
            }
        }
    }

    std::string askForAnswer(const std::string& prompt) const {
        std::string userAnswer;
        std::cout << prompt;
        std::cin >> userAnswer;
        return userAnswer;
    }

    void displayResult() const {
        double percentage = static_cast<double>(score) / totalQuestions * 100;

        std::cout << "\nРезультат для студента " << studentName << " из группы " << groupNumber << ":\n";
        std::cout << "Баллы: " << score << " из " << totalQuestions << std::endl;
        std::cout << "Процент правильных ответов: " << percentage << "%" << std::endl;

        if (percentage >= 90) {
            std::cout << "Оценка: 5" << std::endl;
        } else if (percentage >= 75) {
            std::cout << "Оценка: 4" << std::endl;
        } else if (percentage >= 50) {
            std::cout << "Оценка: 3" << std::endl;
        } else {
            std::cout << "Оценка: 2" << std::endl;
        }
    }
};

int main() {
    TestTaker test;
    test.runTest();

    return 0;
}
